Глава1 Знакомство

Для создания веб-страниц используются языки HTML и CSS. HTML отвечает за
структуру и содержание страницы, CSS — за внешний вид.

Язык HTML состоит из множества тегов. Каждый тег имеет определенный смысл и
предназначение. Каждый тег может иметь определенный набор атрибутов.

CSS состоит из селекторов и свойств.
Селекторы описывают какие именно элементы или группы элементов будут обладать
заданными свойствами.

Все теги можно разделить на парные и одиночные. Каждый парный тег состоит из
двух частей: открывающего тега и закрывающего.
<p>Абзац</p>

Парные теги обычно нужны, чтобы оформить некоторый участок текста.
Благодаря паре тегов вы можете указать начало и конец этого участка.
Но ведь есть теги, которые не предназначены для оформления фрагментов текста.

Например, тег для вставки изображения или тег для вставки разделительной полосы.
Такие теги добавляют на страницу одиночный объект, и им не нужно для этого
заключать в себя какой-то текст.
Поэтому их называют одиночными.

Примеры таких тегов: <br>, <hr>, <img>.

Кстати, в HTML-редакторе вы увидите такие фрагменты кода: <!-- текст -->.
Они называются «комментарии», и браузер не отображает их на странице.

CSS — это язык для управления внешним видом HTML-документа.
С помощью CSS можно задавать параметры отображения любого тега: ширину и высоту,
отступы, цвет и размер шрифта, фон и так далее.
CSS это аббревиатура «Cascading Style Sheets» или «Каскадные Таблицы Стилей».
Обычно CSS называют просто «стили».

Самый простой способ применить стили к тегу заключается в использовании атрибута
style.
Например:
<p style="color: red;">...</p>
В этом примере абзацу задан красный цвет шрифта. Такой способ задания стилей
называют «инлайновые стили» или «встроенные стили»

Задавать стили каждого тега с помощью атрибута style очень затратно и хлопотно.
А ещё это приводит к засорению HTML-кода избыточными, повторяющимися кусками CSS.
К счастью, есть и другие способы подключения стилей.
Первый — подключение внешнего файла с помощью тега <link>
, а второй — использование специального тега <style>

В CSS можно задавать стили только для элементов с определённым классом.
Для этого используется селектор по классу, который пишется так .имя-класса,
например:
.important { color: red; } — выберет все теги с классом "important"
.help { color: green; }    — выберет все теги с классом "help"
Если селектор без точки - имя тега

Различные CSS свойства:
  background-color: red;
  padding-left: 15px;
  text-decoration: line-through;


Глава2 Структура HTML-документа

Каждый HTML-документ должен начинаться с декларации типа документа или «доктайпа».
Тип документа нужен, чтобы браузер мог определить версию HTML и правильно
отобразить страницу.

Например, для старой версии HTML 4.01 доктайп выглядит так:
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
   "http://www.w3.org/TR/html4/strict.dtd">

А для последней версии HTML уже намного проще:
<!DOCTYPE html>

Последнюю версию HTML ещё называют HTML 5. Но так как эта версия уже принята
как стандарт и распространена почти везде, мы будем называть её просто HTML.

Простейшая HTML-страница состоит как минимум из трёх тегов:
1. Тег <html> — это контейнер, в котором находится всё содержимое страницы,
включая теги <head> и <body>.
Как правило, тег <html> идёт в документе вторым после доктайпа.
2. Тег <head> предназначен для хранения других элементов, цель которых — помочь
браузеру в работе с данными.
Содержимое этого тега не отображается напрямую.
3. Тег <body> предназначен для хранения содержания веб-страницы (контента),
отображаемого в окне браузера.

Заголовок страницы — это тот текст, который отображается в левом верхнем углу
браузера, а также во вкладках. Чтобы задать заголовок страницы, нужно
использовать тег <title> внутри тега <head>.
Например, вот так:
<head>
  <title>Курсы — HTML Academy</title>
</head>

Кодировку HTML-страницы нужно указывать для того, чтобы веб-браузер
мог правильно отображать текст на странице.
Если браузер неправильно «угадает» кодировку, то вместо текста будут
отображаться иероглифы.
Чтобы сообщить браузеру кодировку HTML-страницы, необходимо внутри
тега <head> использовать тег:
<meta charset="имя кодировки">
Самая распространённая современная кодировка — utf-8. Используйте её
во всех своих проектах.
Для кириллицы в Windows charset часто задавали как windows-1251.
Но сейчас это считается плохой практикой.

Ключевые слова [5/14]

Есть целое семейство тегов <meta>, называемых мета-тегами. Их можно
использовать внутри тега <head>.
Мета-теги различаются набором атрибутов и их значений, вот некоторые
из атрибутов: content, http-equiv, name и scheme.
Мета-теги хранят полезную для браузеров и поисковых систем информацию.
Один из таких тегов — это описание ключевых слов страницы. Задаётся он так:
<meta name="keywords" content="разные, ключевые, слова">

Описание содержания страницы [6/14]

Ещё один полезный для поисковых систем мета-тег — краткое описание страницы.
Оно задаётся так:
<meta name="description" content="краткое описание">
В атрибуте content должно быть краткое содержание или аннотация страницы.
Оно часто используется поисковиками при отображении результатов поиска.


Подключение стилей [8/14]

CSS-стили можно писать внутри HTML-кода страницы или подключать их как внешний файл.
В первом случае стили называются «встроенными» или «инлайновыми», а писать их
нужно внутри тега <style>. Этот тег обычно размещают внутри <head>.
Например:
<head>
  <style>
    CSS-код
  </style>
</head>
Внутри <style> пишут обычный CSS-код.

Подключение внешних стилей [10/14]

Чаще всего стили подключают из внешнего файла с расширением .css. Для этого
используется тег <link>.
Например:
<head>
  <link href="style.css" rel="stylesheet">
</head>
В атрибуте href задают адрес файла, а атрибут rel="stylesheet"
говорит браузеру, что мы подключаем стили, а не что-то другое.
Лучше подключать стили внутри <head>, но это необязательно.
Тег <link> будет работать и в другом месте страницы.

Скрипты подключаются так же, как и стили: их либо пишут внутри страницы,
либо подключают как внешние файлы.
Встроенные скрипты пишут внутри тега <script>.
Например:
<script>
  JavaScript-код
</script>
Тег <script> можно использовать в любом месте HTML-документа, но лучше вставлять
его в самом конце перед закрывающим тегом </body>.

Подключение внешних скриптов [12/14]

Скрипты чаще всего подключают из внешних файлов с расширением .js.
Для этого используют тег <script> с атрибутом src, в котором указывается
путь к файлу.
Например:
<script src="scripts.js"></script>
Обратите внимание, что тег <script> парный. Если вы подключаете внешние скрипты,
то просто ничего не пишите внутри тега.
Внешние скрипты лучше подключать перед закрывающим тегом </body>.


Как выпасть из потока?

Существует понятие «document flow» или «поток документа». Оно определяет то,
как располагаются элементы на HTML-странице. Абсолютно позиционированные
элементы исключаются из потока. Другие элементы как бы перестают их замечать и
то место, где располагается абсолютно позиционированный элемент, считают пустым.

Когда для одного и того же элемента есть несколько CSS-правил с одинаковыми
свойствами, браузер использует понятия приоритетов и специфичности, чтобы
выбрать значение свойства из нескольких возможных.
Упрощённо, можно сказать что:
  - CSS-правила в значении атрибута style самые приоритетные: <p style="color: red;"></p>
  - за ними идёт селектор с id: #myId
  - затем селектор с классом: .myClass
  - затем селектор с именем тега: p

Наследование [13/15]

Другой важный механизм CSS — это наследование. Он заключается в том, что часть
стилей может передаваться от родительского элемента к дочерним (вложенным в
него). Например, все элементы внутри тега body являются дочерними по отношению
к нему. Если для body в стилях задать цвет текста красным, то цвет всех
остальных элементов тоже станет красным. Ещё пример: тег ul является
родительским по отношению к вложенным в него тегам li. Если задать для ul шрифт
курсивом, то и внутри всех li шрифт станет курсивным.



Наследуемые свойства [5/18]

К наследуемым свойствам относятся в первую очередь свойства, определяющие
параметры отображения текста:
font-size, font-family, font-style, font-weight, color, text-align,
text-transform, text-indent, line-height, letter-spacing, word-spacing,
white-space, direction и т. д.

Также к наследуемым свойствам относятся list-style, cursor, visibility,
border-collapse и некоторые другие. Но они используются значительно реже.
Эти свойства можно и нужно задавать через предков, следуя семантике документа.

Например, параметры текста зачастую не меняются в пределах отдельных блоков страницы:
меню, основного содержания, информационных панелей.
Поэтому общие параметры текста (цвет, размер, гарнитура) обычно указывают в
стилях самих блоков.

Ненаследуемые свойства [6/18]

В предыдущем задании мы перечислили основные наследуемые свойства.
Все остальные относятся к ненаследуемым. Это параметры позиционирования,
размеров, отступов, фона, рамок и т. д.
А именно: background, border, padding, margin, width, height, position и др

Принудительное наследование [7/18]

Для каждого свойства может быть задано значение inherit.
Оно означает, что данное свойство принимает такое же значение, как и у
родительского элемента.
Значение inherit может быть использовано для усиления наследуемых значений,
а также в свойствах, которые обычно не наследуются.

CSS-правила, которые прописаны в style обладают наивысшим приоритетом.
Такой способ задания стилей не приветствуется в профессиональной вёрстке сайтов
и годится только для создания быстрых прототипов.
Однако существует способ переопределить из подключаемых CSS-файлов даже стили,
заданные в атрибуте style.
Для этого нужно использовать ключевое слово !important. Оно задаёт CSS-свойству
усиленный приоритет.
Вот пример:
HTML:
<p style="color: red;" class="blue">Синий или красный?</p>
CSS:
.blue {
    color: blue !important;
}

Расчёт значения специфичности [15/18]

Специфичность селектора разбивается на 4 группы — a, b, c, d:
если стиль встроенный, т.е. определен как style="...", то а=1, иначе a=0;
значение b равно количеству идентификаторов (тех, которые начинаются с #) в селекторе;
значение c равно количеству классов, псевдоклассов и селекторов атрибутов;
значение d равно количеству селекторов типов элементов и псевдо-элементов.
После этого полученное значение приводится к числу (обычно в десятичной системе счисления).
Селектор, обладающий большим значением специфичности, обладает и большим приоритетом.


Перекрестное наследование [17/18]

При создании стилей для сходных по внешнему виду или функциональности элементов,
которые могут использоваться на странице неоднократно, очень удобно пользоваться
перекрёстным наследованием.
Приём этот заключается в следующем:
- создается базовый стиль для таких элементов;
- определяются вспомогательные стили, которые применяются к элементам по мере надобности;
- элемент наследует базовый стиль и один или несколько вспомогательных.
Пример:
На странице используются кнопки разного назначения: для отправки форм, для
сброса информации в полях формы, как элементы навигации и т.д.
Можно вынести общее оформление (размеры, отступы и т.д.) для всех кнопок в
отдельное CSS-правило для класса, например, .button.
А затем создать дополнительные CSS-правила, в которых будут определены только
различающиеся свойства этих кнопок,например, цвет фона. Для этих правил можно
использовать такие названия классов: .button-send, .button-clear, .button-navigation.
Каждая кнопка в HTML-коде будет иметь два класса: общий и дополнительный.
<a class="button button-send">Отправить</a>

Таблицы [2/23]

Простейшая таблица описывается с помощью трёх тегов:
<table> обозначает таблицу.
<tr> расшифровывается как «table row», обозначает строку таблицы.
<td> расшифровывается как «table data», обозначает ячейку внутри строки таблицы.
Теги <td> располагаются внутри тегов <tr>, а те, в свою очередь, внутри <table>.
Почти всё текстовое содержимое таблицы размещается внутри тегов <td>.
В простейшей таблице в каждой строке должно быть одинаковое количество ячеек.
Тег table имееи атрибут border. Можно задать только толщину: <table border="5">
Лучше использовать CSS св-во border как для таблицы, так и ячеек: border: 3px solid black;
border-top, border-right, border-bottom, border-left.
По умолчанию браузер рисует рамки таблицы и рамки отдельных ячеек раздельно.
Чтобы избавиться от таких двойных рамок, используется CSS-свойство таблицы border-collapse.
Вот так:
table {
  border-collapse: collapse;
}
Значение collapse убирает двойные рамки: cхлопываются рамки соседних ячеек, а
также рамки ячеек и внешняя рамка таблицы.
При этом внешняя рамка таблицы может исчезнуть, и чтобы её вернуть, можно увеличить
её ширину.

Отступы внутри ячеек можно добавлять с помощью атрибута cellpadding тега <table>.
Но лучше его не использовать, а задавать отступы с помощью CSS.
CSS-свойство padding задаёт «внутренние отступы элемента» со всех сторон.
Можно задавать отступы для каждой из сторон отдельно, используя свойства:
padding-top, padding-right, padding-bottom, padding-left.

Отступы между ячейками [8/23]

Отступы между ячейками не работают с border-collapse: collapse, что достаточно
логично, ведь рамки ячеек в этом режиме «склеены» и их не разорвать.
Поэтому в этом задании мы используем border-collapse: separate, которое «расклеивает» ячейки.
На самом деле это значение по умолчанию, а мы используем его только для наглядности.
Если удалить свойство border-collapse, то результат не изменится, ячейки будут
отображаться раздельно.

Отступы между ячейками можно задать: с помощью атрибута cellspacing тега <table>
или c помощью CSS-свойства border-spacing.
Отметим, что свойство border-spacing задаётся для таблицы, в отличие от padding,
которое задаётся для ячеек.

В HTML для этого предусмотрен специальный тег <th>, который расшифровывается
как «table header» и обозначает ячейку-заголовок.
Тег <th> аналогичен <td>, он так же должен располагаться внутри <tr>, для него
стилями можно задавать все те же свойства.

Заголовок таблицы [11/23]

Тег <caption> должен размещаться внутри тега <table>, причём непосредственно
внутри него и первым, до остальных вложенных тегов.
Вот так:
<table>
  <caption>Текст</caption>
  ...
 </table>
Тег заголовка идёт первым внутри таблицы, но с помощью CSS можно переместить
заголовок таблицы в любое место:
  сверху или снизу таблицы, по центру, справа или слева.
По вертикали заголовок таблицы перемещается CSS-свойством caption-side со
значениями top и bottom, которые обозначают до и после таблицы соответственно.
По горизонтали заголовок таблицы выравнивается CSS-свойством text-align со
значениями left, right и center

Объединения ячеек

Чтобы объединить ячейки по горизонтали, необходимо использовать атрибут colspan
у тегов <th> или <td>:
<th colspan="2">
Объединение ячеек по вертикали немного сложнее. Оно осуществляется с помощью
атрибута rowspan у тега <td> или <th>.
Когда вы задаёте ячейке атрибут rowspan со значением 2, то ячейка как бы
«растягивается» на следующую строку. При этом ячейка, которая была под
«растянутой» отодвигается в своей же строке вправо, что добавляет в таблицу
лишний столбец.
Удалив ячейку, которая была под «растянутой» мы избавимся от этого столбца.

Выравнивание содержимого в ячейках [18/23]

Содержимое ячеек можно выравнивать по горизонтали и по вертикали с помощью CSS.
За выравнивание по горизонтали отвечает CSS-свойство text-align. Чаще всего
используются значения left, center и right.
За выравнивание по вертикали отвечает CSS-свойство vertical-align. Чаще всего
используются значения top, middle и bottom.
Цветами можно управлять с помощью этих свойств:
  background-color — задаёт цвет фона,
  color — цвет текста,
  border-color — цвет рамок.

Ширина таблицы задаётся с помощью CSS-свойства width, а высота с помощью
свойства height, например:
table {
  width: 100px;
  height: 100px;
}
Размеры таблицы можно задавать как в абсолютных единицах, например, в
пикселях — 20px, так и в относительных, в процентах — 20%.
При использовании процентов размеры таблицы будут вычисляться с учётом размеров
родительского элемента.
Меньше содержимого таблица не сожмется.

Формы [1/18]

Формы нужны для того, чтобы отправлять данные с веб-страницы на веб-сервер,
который сможет эти данные обработать:
  зарегистрировать пользователя,
  создать сообщение на форуме,
  отправить письмо и так далее.
Чтобы создать форму, нужно использовать парный тег <form>, внутри
которого размещаются поля формы.
У тега <form> есть два важных атрибута:
  action задаёт адрес, URL, отправки формы;
  method задаёт метод отправки формы.

Пример:
<form action="https://echo.htmlacademy.ru" method="get">
  поля формы
</form>
Для отправки формы обычно используют методы get или post. Если не
указать атрибут method, то будет использован get.
Метод get посылает данные формы в строке запроса, то есть они видны в
адресной строке браузера и следуют после знака вопроса.
Например: https://www.google.com/search?q=htmlacademy
Метод get лучше использовать в поисковых формах, потому что он позволяет
получить ссылку на результаты поиска и передать её кому-то.
Метод post посылает данные в теле HTTP-запроса и используется, когда
нужно отправить много данных и ссылка на результат
обработки этих данных не нужна. Например, при редактировании личного
профиля.

Текстовое поле ввода [2/18]

Большинство полей форм создаётся с помощью одиночного тега input. У
этого тега два обязательных атрибута:
  type задаёт тип поля;
  name задаёт имя поля.
Тип поля влияет на то, как оно будет отображаться и вести себя.
Самый распространённый тип — это text, или password для пароля
который обозначает текстовое поле. Он же используется по умолчанию.
Пример:
<form action="https://echo.htmlacademy.ru" method="get">
  <input type="text" name="search">
</form>
Имя поля нужно, чтобы правильно обработать данные на сервере. Обычно,
имя поля должно быть уникальным в пределах формы, хотя есть исключения.

Атрибут id поля ввода обозначает идентификатор. Он должен быть уникальным
не только в пределах формы, но и на всей странице.
Обычно идентификаторы используют для повышения удобства работы с формой,
например, создают подписи, связанные с мелкими полями.
При щелчке по таким подписям активируется связанное поле. И это удобно,
так как по большой подписи попасть легче, чем по маленькому полю.
Также идентификаторы используют в JavaScript для работы с полями.
Идентификатор в отличие от имени поля не передаётся на сервер. Лучше
использовать идентификаторы, отличающиеся от имени поля,
особенно актуально это для полей множественного выбора.

Атрибут value задаёт значение поля ввода по умолчанию. Это тоже повышает
удобство.

Парный тег <label> связывает текст и поле ввода логически. А ещё если
щёлкнуть по тексту в такой подписи,
то курсор переместится в соответствующее поле.
Создавать подписи к полям с помощью <label> — хороший приём. Используйте
его.

Первый способ создать подпись — просто обернуть текст подписи и тег
поля в тег <label>, вот так:
<label>
  Подпись <input type="text" name="username">
</label>

Второй способ, когда обернуть поле и текст подписи в тег <label> нельзя.
Например, когда они размещены в разных ячейках таблицы.
В этом случае можно связать подпись с полем с помощью атрибута id.
Алгоритм такой:
 1. Добавляем к полю ввода идентификатор с помощью атрибута id.
 2. Оборачиваем текст подписи в тег <label>.
 3. Добавляем тегу <label> атрибут for.
 4. В атрибут for записываем такое же значение, что и в атрибуте id у поля.
Например:
<label for="user-field-id">Имя пользователя</label>
...
<input id="user-field-id" type="text" name="username">


Кнопка для отправки формы

задается тегом <input> c типом submit.
Надпись на кнопке можно задать с помощью атрибута value. Для кнопки
отправки формы задавать имя необязательно.
Но если имя задано, то на сервер будут отправляться имя и значение кнопки.
Обычно имя для кнопки отправки задают, когда в форме несколько кнопок,
отвечающих за разные действия.
Браузер отправляет на сервер имя и значение только той из них,
на которую нажал пользователь.
Таким образом, сервер может понять, какую кнопку нажали и
что нужно сделать.

Многострочное поле ввода [9/18]

Многострочное текстовое поле создаётся с помощью парного тега <textarea>.
У него есть атрибуты name и id, которые аналогичны атрибутам текстового
поля.
Атрибут rows принимает целочисленное значение и задаёт высоту
многострочного поля в строках.
Атрибут cols задаёт ширину поля в символах. В качестве ширины
символа берётся некоторая «усреднённая ширина».
Атрибут value у многострочного поля отсутствует, а значение по
умолчанию задаётся по-другому.
Текст, расположенный между открывающим и закрывающим тегом <textarea>
и является значением по умолчанию.
Вот так: <textarea>Значение по умолчанию</textarea>

Чекбокс или «галочка» [10/18]

Задается тегом <input> с типом checkbox.
Если галочка стоит, то браузер посылает переменную с именем поля на сервер,
если галочки нет, то не посылается ничего.
Таким образом, атрибут value не является обязательным.
Чтобы галочка стояла по умолчанию, нужно добавить к тегу атрибут checked.
Вот так: <input type="checkbox" checked>
Чекбокс не подразумевает выбор одного элемента из нескольких. Поэтому если в
одной форме есть несколько чекбоксов, то имена у них должны быть разными.

Переключатель или «радиобаттон» [12/18]

Поле-переключатель — это тег <input> с типом radio.
Обычно переключатели размещают группами по несколько штук. Причём у
переключателей из одной группы должно быть одинаковое имя и разные
значения, которые задаются c помощью value.
Таким образом, атрибут value является для переключателей обязательным.
Браузер отправляет на сервер значение value выбранного переключателя.
Чтобы сделать какой-либо вариант в переключателе выбранным по умолчанию,
нужно добавить к соответствующему тегу <input> атрибут checked,
как у поля-галочки

Раскрывающийся список или «селект» [14/18]

Раскрывающийся список так же, как и переключатель, позволяет выбрать
один вариант ответа из нескольких.
Раскрывающийся список создаётся с помощью парного тега <select>, у
которого есть знакомые атрибуты name и id.
Варианты ответов задаются с помощью парных тегов <option>, которые
должны располагаться внутри тега <select>.
Например:
<select name="theme">
  <option value="light">Светлая тема</option>
  <option value="dark">Тёмная тема</option>
  ...
</select>
В атрибуте value тега <option> задаётся значение варианта ответа,
а внутри этого тега располагается подпись варианта ответа.
Если при отправке формы у выбранного варианта задан value, то на сервер
отправится значение этого атрибута.
В противном случае будет отправлен текст подписи.

«Мультиселект» [15/18]

Раскрывающийся список можно превратить в так называемый «мультиселект»,
то есть список, в котором можно выбрать не один, а несколько вариантов.
Чтобы сделать это, нужно добавить к тегу <select> атрибут multiple.
Выбрать несколько вариантов можно, щёлкая по ним с зажатой клавишей Ctrl на
Windows или Command на OS X.
Высоту мультиселекта можно изменять с помощью атрибута size тега <select>.
Чтобы отметить как выбранные по умолчанию одно или несколько значений,
нужно к соответствующим тегам <option> добавить атрибут selected.

Поле для загрузки файлов [16/18]

Поле для загрузки файлов — это тег <input> с типом file. Для этого поля
обязательным атрибутом является имя. Чтобы поле заработало и браузер смог
передать выбранный файл на сервер, необходимо добавить форме атрибут enctype со
значением multipart/form-data. Не полю, а форме.

Скрытое поле [17/18]

И ещё одно невидимое и очень полезное поле. Это скрытое поле.
Его используют, когда в форме нужно отправить какие-то дополнительные служебные
данные, которые не вводятся пользователем.
Например, это могут быть реквизиты заказа или номер пользователя в форме оплаты.
Скрытое поле — это тег <input> с типом hidden.
