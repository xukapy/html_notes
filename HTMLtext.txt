<p>
Абзацы создаются с помощью тега <p>. По умолчанию абзацы начинаются с новой
строки и имеют вертикальные отступы, которыми можно управлять с помощью стилей.

<h1>..<h6>
Заголовки

<ul><li>
Неупорядоченные (или маркированные) списки создаются с помощью тега <ul>,
который может содержать внутри себя теги <li>, обозначающие «элемент списка».

<ol><li>
Упорядоченный список создаётся с помощью тега <ol>, который может содержать
внутри себя теги <li>.
Для упорядоченного списка можно задать атрибут start, который изменяет начало
нумерации.

Список определений [7/17]

Список определений создаётся с помощью трёх тегов:
<dl> обозначает сам список определений;
<dt> обозначает термин;
<dd> обозначает определение термина.
Теги <dt> и <dd> пишутся парами внутри <dl>.

Например:
<dl>
  <dt>Термин</dt>
  <dd>Определение</dd>

  <dt>Второй термин</dt>
  <dd>И его определение</dd>

  <dt>Кошка</dt>
  <dd>Шерстяное изделие развлекательного характера</dd>
</dl>


Важность. Теги strong и b [8/17]

Ещё раз отметим, что этот курс посвящён логической разметке текста, поэтому
уделяется особое внимание смыслу элементов, их предназначению, а не визуальному
форматированию.

В предыдущих заданиях вы познакомились с элементами, которые предназначены для
разметки крупных блоков текста: заголовков, абзацев и списков. В этом и
последующих заданиях мы познакомимся с элементами, предназначенными для разметки
небольших фраз и отдельных слов.

Тег <strong> определяет важность отмеченного текста.
Тег <b> предназначен для выделения текста без придания ему особой важности.

Визуально оба тега одинаковы, они выделяют текст полужирным.

Теги em и i [9/17]
--------------------------------------------------
Следующие два тега предназначены для акцентирования внимания на слово или фразу.

<em>
 определяет текст, на который сделан особый акцент, меняющий смысл предложения.

Например, если мы хотим подчеркнуть, что Кекс не любит питаться укропом (он
больше за тунца), а любит только гонять его по полу, то разметим текст так:
  Инструктор Кекс любит <em>играть</em> с укропом.

<i>
  обозначает текст, который отличается от окружающего текста, но не является
более важным. Обычно так выделяют названия, термины, иностранные слова.

Например, если мы хотим указать, что инспектор — это какой-то специальный
термин, то разметим текст так:
  Обычно Кекс пользовался <i>инспектором</i> браузера для поиска ошибок.

Визуально оба тега одинаковы, они выделяют текст курсивом.

Переносы и разделители. Теги br и hr [10/17]
-------------------------------------------------------
<br>
Иногда возникает необходимость вставить в текст перенос строки, не создавая при
этом абзац. Например, при разметке стихов или текстов песен.
Для этого в HTML предусмотрен одиночный тег <br>.
Иногда этот тег используется для разбиения текста на «как бы абзацы», что
является плохим подходом. Используйте для разметки абзацев тег <p>.

<hr>
Одиночный тег <hr> используется для того, чтобы создать горизонтальную
линию-разделитель.

Цитаты [11/17]
-------------------------------
В HTML существует несколько тегов для обозначения цитат:
<blockquote> предназначен для выделения длинных цитат, которые могут состоять
             из нескольких абзацев. Тег выделяет цитату как отдельный блок
             текста с отступами.
<q>    предназначен для выделения коротких цитат в предложениях. Текст внутри
       этого тега автоматически обрамляется кавычками.
<cite> используется для того, чтобы выделить источник цитаты, название
       произведения или автора цитаты.

<sup> отображает текст в виде верхнего индекса.
<sub> отображает текст в виде нижнего индекса.

Помечаем изменения. Теги del и ins [13/17]
---------------------------------------------------
Любой документ на протяжении своей «жизни» может изменяться. С распространением
динамических веб-приложений вносить изменения в HTML-документы стало проще
простого. Иногда возникает вопрос: а что же именно было изменено в документе,
что было добавлено, а что удалено?

<del> выделяет текст, который был удалён в новой версии документа.
<ins> выделяет текст, который был добавлен в новой версии документа.

Оба тега имеют атрибут datetime, в котором можно указать дату и время, когда
была внесена та или иная правка.

<pre> - преформатированный текст. Сохряняет отступы, переносы
<mark> - просто выделенный текст. Текст внутри <mark> подсвечивается жёлтым фоном.

Ссылки [7/13]
---------------------------------
Ссылки создаются с помощью очень простого и короткого тега <a>.
Например, вот так:
<a href="https://htmlacademy.ru">HTML Academy</a>

Ссылки с якорем обычно используются для создания навигации внутри страницы.
Например, оглавления в начале страницы с большой статьёй.
Ссылка с якорем содержит символ #, после которого идёт идентификатор.
Идентификатор создаётся с помощью атрибута id, который может быть задан у
любого тега. Можно задать адрес, состоящий из одного якоря,
например:
  <a href="#glava1">Глава 1</a>

При щелчке на такую ссылку браузер найдёт на странице элемент с атрибутом id со
значением glava1 и прокрутит окно страницы к нему. То есть перезагрузки
страницы не произойдёт.
Якорь можно использовать и в абсолютных адресах, тогда после перехода на нужную
страницу произойдёт прокрутка к заданной части этой страницы.

Атрибут title - всплывающая подсказка: <a title="Подсказка" href="#">

Добавим изображение [9/13]
---------------------------------
Чтобы добавить на страницу изображение, нужно использовать одиночный тег
<img> с атрибутом src, в котором указан адрес картинки.
Например: <img src="logo.png">
Чтобы управлять шириной или высотой изображения, нужно использовать
атрибуты width и height.
Пример: <img width="100" src="...">
В примере изображению задана ширина 100px. Обратите внимание, что
в атрибуте width после цифры нет px.
Если вы задаёте размер картинки в пикселях, то используйте просто цифры.
Добавлять px не нужно, таков стандарт.

Во втором примере изображению задана относительная ширина,
50 процентов: <img width="50%" src="...">
Высоту в процентах обычно не задают.
Если задать только один из размеров, ширину или высоту, то вторую
размерность браузер вычислит самостоятельно исходя из пропорций
изображения.
Если же задать и ширину, и высоту для картинки:
<img width="100" height="100" src="...">
То браузер может нарушить пропорции исходного изображения.
Альтернативный текст изображения задаётся с помощью атрибута alt.
Пример: <img src="cat.png" alt="Кот в полном расцвете сил">

Изображение-ссылка [12/13]
-------------------------------------
Ссылки можно делать не только с помощью текста, но и с помощью изображений. Для
этого нужно обернуть тег <img> в тег <a>.
Например:
<a href="http://keksby.ru">
  <img src="cat.png" alt="Кекс">
</a>
Часто ссылки-изображения используются в галереях, когда с
уменьшенной версии изображения ставится ссылка на полноразмерное
изображение.

Главный текстовый тег — span [1/16]
--------------------------------------------
При оформлении текста с помощью css чаще всего используют тег <span>.
Он обозначает «просто текстовый блок».
То есть особенного собственного смысла он не имеет. Также этот тег
никак не изменяет отображение текста.
Однако, дополнительный смысл данному тегу добавляют с помощью классов.
Например:
<span class="error"></span>
<span class="ok"></span>
А уже для класса с помощью css задают стили и тем самым изменяют оформление

Свойство font-size: задаём размер шрифта [2/16]
-----------------------------------------------------------
Cвойство font-size задает размер шрифта.
Размер шрифта лучше всего задавать в em — относительной единице измерения.
1em обычно равен длине буквы M в данном шрифте.
Другие единицы измерения для задания размеров шрифта:
Пиксели: 20px
Пункты: 15pt
Проценты: 80%
Пиксели и пункты — это абсолютные единицы измерения, а проценты — относительные
Также размер шрифта можно задавать с помощью ключевых слов:
small, large и т.д. Но их обычно не используют

Свойство font-weight: толщина начертания [3/16]

Полужирность текста можно задавать с помощью свойства font-weight,
которое имеет два основных значения:
normal — обычное начертание;
bold — полужирное начертание.

Свойство font-style: курсив [4/16]

Начертание текста можно задавать с помощью свойства font-style.
Его основные значения:
normal — обычное начертание;
italic — курсивное начертание.

Свойство font-family: шрифт [5/16]

Задать семейство шрифта можно с помощью свойства font-family.
Можно задавать конкретное название шрифта: "Times New Roman".
А можно задавать желаемый тип шрифта, например:
serif — шрифт с засечками;
sans-serif — шрифт без засечек.
Есть и другие типы, но они используются реже.
Обычно в качестве значения свойства задают список шрифтов, перечисляя
их через запятую.
В начале списка располагают самый редкий шрифт, затем похожий,
но более распространенный,
а в самом конце списка — желаемый тип шрифта.
Пример:
body {
    font-family: "PT Sans", "Arial", serif;
}
Браузер проходит по списку слева направо и использует первый найденный
в системе шрифт.

Свойство color: цвет текста [6/16]

Цвет текста задаётся с помощью свойства color.
Значение цвета можно задавать разными способами:
Шестнадцатеричным кодом, например #FF9900.
Ключевым словом: red.
В RGB-формате: rgb(255, 255, 0).

Свойство text-decoration: подчёркивание и другие эффекты [7/16]

Дополнительное оформление текста можно задать с помощью свойства
text-decoration:
  underline — подчеркивание;
  line-through — зачеркивание;
  overline — черта сверху;
  none — убирает вышеперечисленные эффекты.
К тексту можно одновременно применить несколько эффектов,
если перечислить значения через пробел.

Декоративное (пунктирное) подчёркивание [8/16]

Его используют для оформления ссылок и других динамических элементов.
Технология следующая:
  Убираем обычное подчеркивание с помощью text-decoration.
  Задаем нужный цвет текста с помощью color.
  Добавляем декоративное подчеркивание с помощью свойства border-bottom.
Также можно при наведении курсора скрывать такое подчеркивание с помощью
псевдокласса :hover.

Задаём регистр символов с помощью text-transform [9/16]

С помощью css можно управлять даже регистром символов: делать буквы
строчными или прописными.
Делается это с помощью свойства text-transform.
Его значения:
  lowercase — все строчные;
  uppercase — все прописные;
  capitalize — каждое слово начинается с прописной;
  none — отменяет изменение регистра.

Управляем пробелами: white-space [10/16]

Браузер игнорирует множественные пробелы и переносы строк в HTML-коде.
Изменить это поведение можно с помощью тега <pre>.
Однако, с помощью CSS управлять пробелами и переносами можно более гибко.
За это отвечает свойство white-space, значения которого:
  nowrap — отображает весь текст одной строкой без переносов;
  pre — сохраняет пробелы и переносы как в исходном коде аналогично
        тегу <pre>;
  pre-wrap — работает как значение pre, но добавляет автоматические
             переносы, если текст не помещается в контейнер;
  normal — режим по умолчанию.

Горизонтальное выравнивание текста: text-align [11/16]

Выравнивание текста по горизонтали задается с помощью
свойства text-align:
  left — выравнивание по левому краю;
  right — по правому краю;
  center — по центру;
  justify — по ширине.

Вертикальное выравнивание: vertical-align [12/16]

Выравниванием текста по вертикали можно управлять с помощью
свойства vertical-align. Его действие хорошо заметно в ячейках таблицы.
Внутри текстовой строки «работа» этого свойства заметна,
если в ней есть фрагменты разного размера.
У данного свойства много значений, но самые часто используемые:
  top — выравнивание по верхнему краю строки;
  middle — по середине;
  bottom — по нижнему краю;
  baseline — по базовой линии (значение по умолчанию).
С помощью CSS можно имитировать теги <sub> и <sup>, которые применяются
для создания нижних и верхних индексов.
Делается это так:
  1. Используем свойство vertical-align со значением sub или super.
  2. Немного уменьшаем размер шрифта с помощью font-size.

Свойство line-height: управляем высотой строки [14/16]

Высотой строки или, правильнее, межстрочным интервалом можно
управлять с помощью свойства line-height.
Значение этого свойства можно задавать следующими способами:
  Множителем, например 1.5, 2.
  В процентах: 150%.
  С помощью любых других единиц измерения CSS: 12px, 2em.
  Ключевым словом normal, которое задает автоматический расчет
  высоты строки.
Предпочтительнее задавать межстрочный интервал либо множителем,
либо в относительных единицах измерения.


Unicode-символы [1/26]

Помимо тех символов, которые помещаются у нас на клавиатуре,
в стандарте кодирования Unicode представлены знаки почти всех
письменных языков, а также разные специальные символы.
В разметке HTML возможно написать любой символ Unicode,
используя специальные ссылки-мнемоники: в виде слова,
например, &название;
или в числовом обозначении с использованием
десятичного или шестнадцатиричного кода, например, &#224;.
Примеры Unicode-символов:
  &copy;	&#169;	©
  &alpha;	&#945;	α
  &para;	&#182;	¶

Свойство text-shadow [2/26]

Тени для текста создаются с помощью CSS-свойства text-shadow.
Оно очень похоже на box-shadow, но имеет свои особенности:
  а) свойство text-shadow применяется к тексту;
  б) форма тени повторяет форму текстовых символов;
  в) можно управлять смещением тени, её цветом, а также размытием;
  г) нельзя управлять растяжением текстовой тени;
  д) можно создавать множественные тени.
text-shadow: 0px 0px 0px #333333;
Первый параметр свойства text-shadow обязателен и задаёт смещение тени
по горизонтали относительно текста. Положительное значение этого
параметра сдвигает тень вправо, отрицательное — влево.
Смещение задаётся в абсолютных и относительных единицах измерения:
  px, em, pt и других.
Второй параметр свойства text-shadow тоже обязателен и
задаёт смещение тени по вертикали
Третий параметр свойства text-shadow необязателен и задаёт
радиус размытия тени.
Последний параметр свойства text-shadow необязателен и задаёт цвет тени.
Если цвет тени не указан, то он совпадает с цветом текста

Эффект вдавленного текста [7/26]

У текста может быть задано сразу несколько теней. Для этого
определения теней нужно перечислить через запятую.
При этом тени распределяются по правилу: первая тень в списке — самая
верхняя, последняя в списке — самая нижняя.
text-shadow:
    1px 1px 1px #111111,
    2px 2px 2px #222222;
С помощью множественных теней можно добиваться необычных результатов.
Например, можно добавить тексту эффект «вдавленности» с помощью двух
однотонных теней: более тёмная смещается немного вверх и влево,
а более светлая — вниз и вправо.

Декоративная ретро-тень [8/26]

Ещё один текстовый эффект создаётся из двух резких теней.
Тени смещены в одну сторону. Нижняя тень смещена чуть сильнее
и её цвет отличается от цвета фона, а верхняя тень смещена слабее
и цвет её совпадает с цветом фона.
Получается интересный эффект обводки.
Такой эффект хорошо подходит для заголовков с винтажным стилем.

Логотип: иконочный шрифт [11/26]

Помимо букв шрифт может содержать и другие графические символы.
Существуют инструменты, позволяющие собрать свой собственный шрифт
из SVG-объектов. Их довольно много: fontcustom.com, icomoon.io/app,
fontastic.me, glyphter.com и другие.

Логотип: выравнивание размеров [12/26]

Можно сделать текст плотнее, уменьшив межсимвольное расстояние.
Это делается c помощью свойства letter-spacing. Браузер по умолчанию
устанавливает межсимвольное расстояние автоматически
согласно определенному значению у каждого шрифта.
Значение по умолчанию соответствует letter-spacing: 0.
Увеличение или уменьшение значения letter-spacing изменит расстояние
между символами на заданную величину.
Значение задаётся в px, em, pt или других единицах длины CSS.

Перенос слов [14/26]

Изменить правила переноса, чтобы символы, не поместившиеся по ширине
в контейнер, переносились на новую строку.
Для этого в CSS существует свойство word-wrap. Оно принимает
значения: normal и break-word. В случае normal слова переносятся на
новую строку по обычным правилам (то есть по пробелам). А при значении
break-word перенос производится браузером в тех местах, где слова
перестают помещаться в контейнер.
Это как раз то, что нам нужно: зададим нужный перенос слова,
увеличим межсимвольное расстояние и поправим отступ.
Также нужно заметить, что свойство word-wrap — изначально проприетарное
расширение Microsoft, а в текущем черновике спецификации CSS3
переименовано в overflow-wrap. Название word-wrap сейчас обозначено
как «альтернативное» именование.

Свойство text-indent [15/26]

text-indent устанавливает отступ для первой строки блока текста.
С помощью этого свойства удобно делать красную строку в абзацах.
Значение свойства может принимать положительное или отрицательное
значение, задаётся в px, em, pt или других единицах длины CSS.
При задании значения в процентах, отступ первой строки вычисляется в
зависимости от ширины блока.

Псевдоэлемент ::first-letter, ::first-line [16/26]

В CSS существуют особые псевдоэлементы, позволяющие стилизовать первую
букву в слове или первую строку в блоке текста.
Крупная, отличная от прочих, первая буква блока текста называется
буквицей. Исторически буквицей украшали главы и разделы печатных
книг и рукописей. Для создания буквицы воспользуемся
псевдоэлементом ::first-letter:
p::first-letter { color: red; }
Аналогично для строк ::first-line

Колоночная разметка: свойство column-count [18/26]

Многоколоночная разметка CSS — замечательная возможность, позволяющая
разбить блок с текстом на несколько колонок. Обычно очень длинные строки
сложно читать: если приходится слишком долго перемещать взгляд с конца
одной строки на начало другой, можно легко потерять нужную строку.
Чтобы сэкономить место на экране, но при этом сделать текст читабельным,
можно разбить один сплошной блок текста на несколько колонок, как это
делается в газетах.
Уже сейчас во всех популярных современных браузерах можно использовать
многоколоночную разметку CSS. Давайте рассмотрим основные свойства,
позволяющие создавать колонки.
column-count принимает в качестве
параметра целое число и делит блок текста на заданное число колонок,
равных друг другу по ширине.

Колоночная разметка: свойство column-width [19/26]

Свойство column-width задаёт минимальную желаемую ширину колонки.
Если свойство column-count ещё не было задано, браузер автоматически
поделит текст на такое количество колонок, чтобы они уместились во
всю доступную ширину.
Значение свойства положительное и задаётся в px, em, pt или других
единицах длины CSS.
Следует отметить, что если одиночная строка может включать от 45 до 75
символов, чтобы быть читабельной, то для колонок текста рекомендуется
придерживаться ширины, включающей 40-50 символов.

Колоночная разметка: свойство column-gap [20/26]

Между колонками есть промежуток. Рекомендованная ширина промежутка
по умолчанию равна 1em.
Но она может быть изменена при помощи свойства column-gap.
Единицы измерения тоже px, em, pt и другие.

Направление текста [21/26]

Ещё одной интересной, но малоиспользуемой возможностью работы с
текстом в CSS является управление направлением текста. Обычно эта
возможность применяется для корректного отображения арабского языка
и иврита, в которых чтение происходит справа налево.
В CSS за направление текста отвечает свойство direction, принимающее
значения ltr (направление слева направо) и rtl (направление справа налево).
Однако помимо направления текста свойство direction также влияет на
позицию полосы прокрутки в блоке.
Если попробовать задать для кириллицы или латиницы обратное направление
текста (справа налево) direction: rtl;, мы увидим, что текст в блоке
выровнялся наоборот, и полоса прокрутки блока сменила своё положение
на противоположное. Но при этом сам текст не стал менять своё
направление. Это произошло потому, что браузер автоматически задал
тексту корректное направление, проанализировав используемые символы
Unicode. Чтобы повлиять на это решение браузера существует
свойство unicode-bidi, принимающее значения:
  normal — браузер самостоятельно определяет, как ему следует
           отображать текст на основе используемых символов Unicode;
  embed — переопределяет направление текста, располагая его согласно
          свойству direction (применяется, когда в блоке текст на двух
          разнонаправленных языках);
  bidi-override — переопределяет порядок символов в тексте согласно
                  значению direction.

Переполнение текста [23/26]

Ещё одно интересное текстовое свойство — text-overflow. Оно позволяет
определить, как будет выглядеть текст, если не поместится в контейнер.
Оно принимает разные значения, но универсальными и работающими во всех
современных браузерах являются clip и ellipsis.
Значение clip задано по умолчанию, и при нём текст просто обрезается
по размеру контейнера, а при ellipsis — обрезается и к концу строки
добавляется многоточие.
К сожалению, у этого свойства есть ограничения, которые делают его
менее полезным: оно применимо только к однострочным текстам, а также
к блокам, значение свойства overflow которых установлено в auto,
scroll или hidden.

Интервал между словами [24/26]

И, наконец, последнее свойство, которые мы рассмотрим в этом курсе,
word-spacing. Оно задаёт расстояние между отдельными словами и
строчными элементами. Значение может быть положительное или отрицательное
и задаётся в px, em, pt или других единицах измерения CSS.
Свойство word-spacing также можно использовать для задания отступов
между блочно-строчными элементами, а также изображений, ведь
изображения тоже являются строчными.
